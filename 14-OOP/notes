/*

4 fundamental principles
ABSTRACTION
    Ignore or hide details that don't matter.  Gives an overview
ENCAPSULATION
    Keep methods private inside the class.  Some methods can be exposed as a public interface (API)
INHERITANCE
    Makes properties and methods available to a child class.  Reuse common logic.
POLYMORPHISM 
    A child class can overwrite a method inherited from a parent class.

==============OOP IN JAVASCRIPT===============

All objects in JavaScript are linked to a prototype object.  Objects inherent methods from the prototype.


==============CONSTRUCTOR FUNCTIONS AND THE 'NEW' OPERATOR===============

const Person = function(firstName, birthYear) {
    this.firstName = firstName
    this.birthYear = birthYear
}

const mike = new Person('Mike', 1986)
console.log(mike) = PersonÂ {firstName: 'Mike', birthYear: 1986}
---const mike is an instance


==============PROTOTYPES===============

console.log(Person.prototype)  -> Person {}

Add a function to Person without setting it on line 20
    Person.prototype.calcAge = function () {
        console.log(2023 - this.birthYear)
    }
This allows an instance of a person to use a function
 ex: mike.calcAge() will return the calculated age.


==============Prototypal Inheritance and The Prototype Chain===============
    
The constructor function [Person()]
    const Person = function(firstName, birthYear) {
        this.firstName = firstName
        this.birthYear = birthYear
    }
Prototype [Person.prototype]
    calcAge: function(){}
    

==============Prototypal Inheritance on Built-In Objects===============

console.log(mike.__proto__.__proto__) // goes up to the Object.prototype

const arr = [2,3,56,2,56]
console.log(arr.__proto__) // you'll find all the methods you can do on arrays like forEach, map, filter, etc. Thanks to inheritence.  In other words
console.log(arr.__proto__ === Array.prototype) // the same


==============ES6 Classes===============

Classes are NOT hoisted
Class are first class citizens, they can be passed into functions and return from functions
Classes are executed in strict mode

class PersonCl {
    constructor(firstName, birthYear){
        this.firstName = firstName
        this.birthYear = birthYear
    }
}

You can still set a PersonCl.prototype method using ES6

*/
